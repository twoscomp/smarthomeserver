version: "3.9"

x-env: &env
  environment:
    - PUID=${PUID}
    - PGID=${PGID}
    - TZ=${TZ}

networks:
  default:
    name: smarthomeserver
    external: true
  outside:
    external:
      name: host

secrets:
  shepherd_registry_password:
    external: true

services:
  grafana:
    <<: *env
    image: "grafana/grafana:latest"
    container_name: "grafana"
    restart: unless-stopped
    user: ${PUID}:${PGID}
    volumes:
      - "${DATADIR}/grafana/data:/var/lib/grafana"
      - "${DATADIR}/grafana/provisioning:/etc/grafana/provisioning"
    environment:
    # uncomment this if you wanta to allow anonymus acces to Grafana for embedding (e.g. in Home Assistant dashboards)
    #  - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ALLOW_EMBEDDING=true
      
  prometheus:
    <<: *env
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: ${PUID}:${PGID}
    volumes:
      - ${DATADIR}/prometheus/etc:/etc/prometheus
      - ${DATADIR}/prometheus/data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    deploy:
      placement:
        constraints:
          - node.role == manager

          # cadvisor:
          #   image: gcr.io/cadvisor/cadvisor:latest
          #   container_name: cadvisor
          #   command:
          #     - "--docker_only=true"
          #     - "--housekeeping_interval=30s"
          #   volumes:
          #     #- /var/run/docker.sock:/var/run/docker.sock:ro
          #     - /:/rootfs:ro
          #     - /var/run:/var/run:rw
          #     - /sys:/sys:ro
          #     - /var/lib/docker/:/var/lib/docker:ro
          #     - /dev/disk/:/dev/disk:ro
          #   restart: unless-stopped
          #   ports:
          #     - 8080:8080
          #   networks:
          #     - outside
          #   deploy:
          #     labels:
          #       prometheus-job: cadvisor
          #     mode: global

  graphite_exporter:
    image: prom/graphite-exporter
    container_name: graphite_exporter
    user: ${PUID}:${PGID}
    command:
      - "--graphite.mapping-config=/config/graphite_mapping.conf"
    volumes:
      - ${DATADIR}/graphite-exporter/config:/config
    ports:
      - "9108:9108"
      - "2003:9109"
      - "2003:9109/udp"

