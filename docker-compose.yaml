version: "3.9"

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"

x-env: &env
  environment:
    - PUID=${PUID}
    - PGID=${PGID}
    - TZ=${TZ}

networks:
  default:
    name: smarthomeserver
  adguard-mvl-1:
    external: true
  adguard-mvl-2:
    external: true

volumes:
  adguard1:
  adguard2:

services:
  adguard1:
    <<: *logging
    <<: *env
    container_name: adguard
    image: adguard/adguardhome:latest
    restart: unless-stopped
    # ports:
    #  - "53:53/tcp"
    #  - "53:53/udp"
    #  - "67:67/udp"
    #  - "443:443/tcp"
    #  - "853:853/tcp"
    #  - "784:784/udp"
    #  - "3300:3000/tcp"
    #  - "3380:80/tcp"
    volumes:
      - "adguard1:/opt/adguardhome/work"
      - "${DATADIR}/adguard/confdir:/opt/adguardhome/conf"
    networks:
      - adguard-mvl-1

  adguard2:
    <<: *logging
    <<: *env
    container_name: adguard
    image: adguard/adguardhome:latest
    restart: unless-stopped
    # ports:
    #  - "53:53/tcp"
    #  - "53:53/udp"
    #  - "67:67/udp"
    #  - "443:443/tcp"
    #  - "853:853/tcp"
    #  - "784:784/udp"
    #  - "3300:3000/tcp"
    #  - "3380:80/tcp"
    volumes:
      - "adguard2:/opt/adguardhome/work"
      - "${DATADIR}/adguard/confdir:/opt/adguardhome/conf"
    networks:
      - adguard-mvl-2

  watchtower:
    <<: *logging
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true # deleting old unused images automatically
      # optional for notifications
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
      # alternative for notification via pushover
      #- WATCHTOWER_NOTIFICATIONS=shoutrrr
      #- WATCHTOWER_NOTIFICATION_URL=pushover://shoutrrr:${PO_TOKEN}@${PO_USERKEY}

  loki:
    <<: *logging
    <<: *env
    image: grafana/loki:2.6.1
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ${DATADIR}/loki/config/loki-config.yaml:/etc/loki/loki-config.yaml
      - ${DATADIR}/loki/data:/data/loki

  duplicati:
    <<: *logging
    <<: *env
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    restart: unless-stopped
    volumes:
      - ${DATADIR}/duplicati/config:/config
      - ${DATADIR}:/source

  nginx-proxy-manager:
    <<: *logging
    <<: *env
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ${DATADIR}/nginx-package-manager/data:/data
      - ${DATADIR}/nginx-package-manager/letsencrypt:/etc/letsencrypt
    healthcheck:
      test: ["CMD", "/bin/check-health"]
      interval: 10s
      timeout: 3s

  grafana:
    <<: *logging
    image: "grafana/grafana:latest"
    container_name: "grafana"
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    user: "0"
    volumes:
      - "${DATADIR}/grafana/data:/var/lib/grafana"
      - "${DATADIR}/grafana/provisioning:/etc/grafana/provisioning"
    # uncomment this if you wanta to allow anonymus acces to Grafana for embedding (e.g. in Home Assistant dashboards)
    environment:
    #  - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ALLOW_EMBEDDING=true

  homeassistant:
    <<: *logging
    <<: *env
    container_name: homeassistant
    restart: unless-stopped
    image: lscr.io/linuxserver/homeassistant:latest
    volumes:
      - ${DATADIR}/homeassistant/config:/config
    labels:
      # don't automatically update this container as it might break your setup
      - "com.centurylinklabs.watchtower.enable=false"

#  readarr:
#    <<: *logging
#    <<: *env
#    image: lscr.io/linuxserver/readarr:develop
#    container_name: readarr
#    environment:
#      - PUID=0
#      - PGID=0
#      - TZ=${TZ}
#    volumes:
#      - ${DATADIR}/readarr:/config
#      - /mnt/qnap-download:/data
#    restart: unless-stopped

#  prometheus:
#    <<: *logging
#    image: prom/prometheus:v2.37.0
#    container_name: prometheus
#    restart: unless-stopped
#    user: ${PUID}:${PGID}
#    volumes:
#      - ${DATADIR}/prometheus/etc:/etc/prometheus
#      - ${DATADIR}/prometheus/data:/prometheus
#    command:
#      - "--config.file=/etc/prometheus/prometheus.yaml"

#  node_exporter:
#    <<: *logging
#    image: prom/node-exporter
#    container_name: node_exporter
#    command:
#      - '--path.rootfs=/host'
#    pid: host
#    restart: unless-stopped
#    volumes:
#      - '/:/host:ro,rslave'
#    deploy:
#      mode: global
#
#  cadvisor:
#    <<: *logging
#    image: google/cadvisor:latest
#    container_name: cadvisor
#    command:
#      - "--docker_only=true"
#      - "--housekeeping_interval=30s"
#      - "--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp,memory_numa"
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:ro
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      - /dev/disk/:/dev/disk:ro
#      - /etc/machine-id:/etc/machine-id:ro
#    devices:
#      - /dev/kmsg
#    restart: unless-stopped
#    deploy:
#      mode: global

